openapi: "3.0.1"

info:
  title: Infernal Studios API
  version: "1.0"
  description: |
    This API facilitates the needs of Infernal Studios to provide its
    services cleanly and automatically, such as the Forge update checker,
    shortened links (redirects), etc.

    The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
    "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and "OPTIONAL" in this
    document are to be interpreted as described in [RFC 2119](https://datatracker.ietf.org/doc/html/rfc2119).

    When the [token](#section/Authentication/token) security scheme is defined
    for a request in this doc, it means that the request must be authenticated
    with a valid token with the permission listed beside it. (Exception: the
    [POST `/auth/token`](#/paths/~1auth~1token/post) endpoint does not require any permissions)

    The following headers will always be present in responses:

    | Header | Description |
    | --- | --- |
    | X-RateLimit-Limit | The numver of allowed requests in the current period |
    | X-RateLimit-Remaining | The number of requests remaining in the current period |
    | X-RateLimit-Reset | The timestamp in seconds since the epoch of the next period |
  contact:
    name: Infernal Studios
    email: contact@infernalstudios.org
  termsOfService: https://example.com

servers:
  - url: https://infernalstudios.org/api
    description: |
      Official Infernal Studios API.
      Clients must not expect outdated versions of the API to be supported and
      served at this URL.

components:
  headers:
    X-RateLimit-Limit:
      description: The number of allowed requests in the current period
      schema:
        type: integer
    X-RateLimit-Remaining:
      description: The number of remaining requests in the current period
      schema:
        type: integer
    X-RateLimit-Reset:
      description: The number of seconds left in the current period
      schema:
        type: integer

  responses:
    too_many_requests:
      description: Too Many Requests
      content:
        application/json:
          schema:
            type: object
            required: [errors]
            properties:
              errors:
                description: |
                  The error message(s) that occurred.
                type: array
                items:
                  type: string
          examples:
            too_many_requests:
              $ref: "#/components/examples/too_many_requests"

    internal_server_error:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/error"
          examples:
            internal_server_error:
              value: { "errors": ["An unexpected error occurred."] }

    zod_error:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/zod_error"
          examples:
            zod_error:
              value:
                errors:
                  - code: "invalid_type"
                    expected: "array"
                    received: "undefined"
                    path: ["path", "to", "value"]
                    message: "Required"

    unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/error"
          examples:
            invalid_auth:
              description: The below provided array of strings are the error messages for invalid authorization.
              value:
                errors:
                  - "A token is required for this endpoint"
                  - "The authorization header must be of type 'Bearer'"
                  - "The provided token is invalid"
                  - "Insufficient permissions"

  securitySchemes:
    login:
      type: http
      scheme: Basic
      description: |
        Basic authentication.
        This is used for generating a temporary API key for the client.

    token:
      type: http
      scheme: bearer
      bearerFormat: Random 127 character long hex string
      description: |
        The token is:
          - used to authenticate the user and to authorize the user's
        actions.
          - issued by the server and is used to identify the user.
          - must be sent in the Authorization header of a request.
          - valid for a limited time (login tokens practically do not expire).
          - in a string form its id, which is a random 127-character-long hex string, which is what you see in the Authorization header.

  schemas:
    token:
      type: object
      required: [id, user, expiry, permissions, reason]
      properties:
        id:
          type: string
          description: The token's unique ID.
        user:
          type: string
          description: The token holder's ID.
        expiry:
          type: number
          description: The token's expiry (unix) timestamp.
        permissions:
          type: array
          description: The token's permissions.
          items:
            type: string
        reason:
          type: string
          description: The reason why the token was issued.

    partial_token:
      type: object
      required: [permissions]
      properties:
        expiry:
          $ref: "#/components/schemas/token/properties/expiry"
        reason:
          $ref: "#/components/schemas/token/properties/reason"
        permissions:
          $ref: "#/components/schemas/token/properties/permissions"

    redirect:
      type: object
      required: [id, name, url, path]
      properties:
        id:
          type: string
          description: The redirect's unique ID.
        url:
          type: string
          description: The URL to redirect to.
        name:
          type: string
          description: The name of the redirect.
        path:
          type: string
          description: The path that the redirect is located on, must be unique.

    partial_redirect:
      type: object
      properties:
        url:
          $ref: "#/components/schemas/redirect/properties/url"
        name:
          $ref: "#/components/schemas/redirect/properties/name"
        path:
          $ref: "#/components/schemas/redirect/properties/path"

    mod:
      type: object
      required: [id, name, url]
      properties:
        id:
          type: string
          description: The mod's unique ID.
        name:
          type: string
          description: The mod's name.
        url:
          type: string
          description: The URL to the mod's homepage.

    partial_mod:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/mod/properties/name"
        url:
          $ref: "#/components/schemas/mod/properties/url"

    version:
      type: object
      required: [id, mod, version, url, date, changelog]
      properties:
        id:
          type: string
          description: |
            The version's unique ID.<br>
            Must conform to the [semantic versioning specification](https://semver.org/spec/v2.0.0.html).
        name:
          type: string
          description: The version's name.
        url:
          type: string
          description: The URL to the version's homepage.
        minecraft:
          type: string
          description: The Minecraft version this version is for.
        recommended:
          type: boolean
          description: Whether or not this version is recommended.
        changelog:
          type: string
          description: The version's changelog.
        loader:
          type: string
          description: The loader that this version is compatible with.
          enum:
            - forge
            - fabric
            - rift
            - liteloader
            - quilt
        dependencies:
          type: array
          description: The version's dependencies.
          items:
            $ref: "#/components/schemas/dependency"

    dependency:
      type: object
      required: [id, url, required, side, version]
      properties:
        id:
          type: string
          description: The modid of the dependency.
        url:
          type: string
          description: The URL to the download page of the dependency.
        required:
          type: boolean
          description: Whether or not this dependency is required.
        side:
          type: string
          description: The side this dependency is for.
          enum:
            - CLIENT
            - SERVER
            - BOTH
        version:
          type: string
          description: |
            The version or version range of the dependency.
            See [NPM's semver](https://nodejs.dev/learn/semantic-versioning-using-npm) for more information.

    forge_update_json:
      type: object
      required: [homepage, promo]
      properties:
        homepage:
          type: string
          description: The URL to the mod's homepage.
        promo:
          type: object
          description: The mod's latest versions.
          properties:
            <mcversion>-latest:
              type: string
              description: The latest version of the mod for the specified Minecraft version.
            <mcversion>-recommended:
              type: string
              description: The recommended version of the mod for the specified Minecraft version.
        <mcversion>:
          type: object
          description: The mod's versions for the specified Minecraft version.
          properties:
            <version>:
              type: string
              description: The changelog for the version.

    error:
      type: array
      items:
        type: string

    zod_error:
      description: |
        The issue array returned by the Zod library.
        This is used to provide a more detailed error message to the client.

        Read more: https://github.com/colinhacks/zod#errors
      type: array
      items:
        type: object

  examples:
    too_many_requests:
      summary: Too Many Requests
      description: |
        The client has sent too many requests in a given amount of time.
        The server is temporarily unable to service the request.
      value: { "errors": ["Too many requests"] }

    token:
      summary: Token
      value:
        id: "a-random-string"
        user: "username"
        expiry: 1577880000
        permissions:
          - "self:modify"
          - "user:modify"
          - "user:view"
          - "token:delete"
          - "mod:create"
          - "mod:modify"
          - "mod:delete"
          - "redirect:create"
          - "redirect:modify"
          - "redirect:delete"
          - "admin"
          - "superadmin"
        reason: "A reason"

    redirects:
      summary: Redirects
      value:
        - id: "a-random-unique-string"
          name: "Example"
          url: "https://example.com"
          path: "/"
        - id: "another-random-string"
          name: "Another Example"
          url: "https://example.com/another/link"
          path: "/another/path"

    redirect:
      summary: Redirect
      value:
        id: "a-random-unique-string"
        name: "Example"
        url: "https://example.com"
        path: "/"

    mod:
      summary: Mod
      value:
        id: "acoolmod"
        name: "A cool mod name"
        url: "https://example.com/link/to/mod"

    versions:
      summary: Versions
      value:
        - id: "1.0.0"
          name: "1.0.0"
          url: "https://example.com/1.0.0"
          minecraft: "1.18.1"
          recommended: true
          changelog: "A changelog"
          loader: "forge"
          dependencies:
            - id: "acoolmod"
              url: "https://example.com/link/to/mod"
              required: true
              side: "CLIENT"
              version: "1.0.0"
        - id: "1.0.1"
          name: "1.0.1"
          url: "https://example.com/1.0.1"
          minecraft: "1.18.1"
          recommended: false
          changelog: "A changelog"
          loader: "liteloader"
          dependencies:
            - id: "acoolmod"
              url: "https://example.com/link/to/mod"
              required: true
              side: "CLIENT"
              version: "1.0.0"
    version:
      summary: Version
      value:
        id: "1.0.0"
        name: "1.0.0"
        url: "https://example.com/1.0.0"
        minecraft: "1.18.1"
        recommended: true
        changelog: "A changelog"
        loader: "forge"
        dependencies:
          - id: "acoolmod"
            url: "https://example.com/link/to/mod"
            required: true
            side: "CLIENT"
            version: "1.0.0"

    forge_update_json:
      summary: Forge Update JSON
      value:
        homepage: "https://example.com/link/to/mod"
        promos:
          1.18.1-latest: "1.0.0"
          1.18.1-recommended: "1.0.0"
        "1.18.1":
          "1.0.0": Added epic new stuff!

paths:
  /status:
    get:
      summary: Get API status
      description: |
        Returns the status of the API. Make sure to parse the JSON response,
        and only validate the given fields, because more could be changed in
        the future.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required: ["status"]
                properties:
                  status:
                    type: string
                    description: |
                      Only possible values are `"ok"` and `"maintainance"`.
                      This may change in the future.<br>
                      If this value is `"maintainance"`, the API is undergoing
                      maintainance and other endpoints should not be expected
                      to work.
                example: { "status": "ok" }
        "419":
          $ref: "#/components/responses/too_many_requests"

  /auth/login:
    post:
      summary: Login
      description: |
        Logs in the user and returns a token.
        The token is practically unexpireable.
      security:
        - login: []

      requestBody:
        description: |
          The request body must contain the username and password of the user.
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, password]
              properties:
                username:
                  type: string
                  description: |
                    The username of the user.
                password:
                  type: string
                  description: |
                    The password of the user.<br>
                    The password must not be hashed by the client, the server does it automatically.<br>
                    Because of this, the api call should be made through HTTPS.
            examples:
              login:
                value: { "username": "admin", "password": "really_secure_PASSW0RD" }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/token"
              examples:
                token:
                  $ref: "#/components/examples/token"
        "400":
          $ref: "#/components/responses/zod_error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
              examples:
                invalid_credentials:
                  summary: Invalid credentials
                  value: { "errors": ["Invalid username or password"] }
        "419":
          $ref: "#/components/responses/too_many_requests"
        "500":
          $ref: "#/components/responses/internal_server_error"

  /auth/token:
    post:
      summary: Create Token
      description: |
        Creates a token for the user.<br>
        A token can only inherit its owner's permissions, it cannot have any additional permissions.
      security:
        - token: []

      requestBody:
        description: |
          The request body must contain an object with a `"permissions"` array.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/partial_token"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/token"
              examples:
                token:
                  $ref: "#/components/examples/token"
        "400":
          $ref: "#/components/responses/zod_error"
        "401":
          $ref: "#/components/responses/unauthorized"
        "419":
          $ref: "#/components/responses/too_many_requests"
        "500":
          $ref: "#/components/responses/internal_server_error"

  /auth/token/:id:
    delete:
      summary: Delete Token
      description: |
        Deletes a token.

        A token can only be deleted if it is not expired.<br>
        Expired tokens are automatically deleted every minute, there's no need to do it yourself.<br>
        If an expired token hasn't been deleted yet, it will be deleted when it's used.<br>
        A token can delete itself, and another token can delete it if it has the `"token:delete"` permission.<br>
        Only tokens belonging to the same user can delete each other.
      security:
        - token: ["token:delete"]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: The token's unique ID.
      responses:
        "204":
          description: No Content
        "400":
          $ref: "#/components/responses/zod_error"
        "401":
          $ref: "#/components/responses/unauthorized"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
              examples:
                token_not_found:
                  summary: Token not found
                  value: { "errors": ["Token not found"] }
        "419":
          $ref: "#/components/responses/too_many_requests"
        "500":
          $ref: "#/components/responses/internal_server_error"

  /redirects:
    get:
      summary: Get Redirects
      description: |
        Returns all redirects.

        The redirects aren't sorted, they're returned in the order they were returned by the database.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/redirect"
              examples:
                redirects:
                  $ref: "#/components/examples/redirects"
        "419":
          $ref: "#/components/responses/too_many_requests"
        "500":
          $ref: "#/components/responses/internal_server_error"
    post:
      summary: Create Redirect
      description: |
        Creates a redirect.

        The `path` field must be unique, as there's no way there can be two redirects at the same place.<br>
        The redirect logic discards leading and trailing slashes, so these are all the same:
          - `/example_path/`
          - `/example_path`
          - `example_path`
          - `example_path/`
      security:
        - token: ["redirect:create"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/redirect"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/redirect"
              examples:
                redirect:
                  $ref: "#/components/examples/redirect"
        "400":
          $ref: "#/components/responses/zod_error"
        "401":
          $ref: "#/components/responses/unauthorized"
        "419":
          $ref: "#/components/responses/too_many_requests"
        "500":
          $ref: "#/components/responses/internal_server_error"

  /redirects/:id:
    put:
      summary: Update Redirect
      security:
        - token: ["redirect:modify"]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: The redirect's unique ID.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/partial_redirect"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/redirect"
              examples:
                redirect:
                  $ref: "#/components/examples/redirect"
        "400":
          $ref: "#/components/responses/zod_error"
        "401":
          $ref: "#/components/responses/unauthorized"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
              examples:
                redirect_not_found:
                  summary: Redirect not found
                  value: { "errors": ["Redirect not found"] }
        "419":
          $ref: "#/components/responses/too_many_requests"
        "500":
          $ref: "#/components/responses/internal_server_error"
    delete:
      summary: Delete Redirect
      security:
        - token: ["redirect:delete"]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: The redirect's unique ID.
      responses:
        "204":
          description: No Content
        "400":
          $ref: "#/components/responses/zod_error"
        "401":
          $ref: "#/components/responses/unauthorized"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
              examples:
                redirect_not_found:
                  summary: Redirect not found
                  value: { "errors": ["Redirect not found"] }
        "419":
          $ref: "#/components/responses/too_many_requests"
        "500":
          $ref: "#/components/responses/internal_server_error"

  /mods:
    post:
      summary: Create Mod
      description: |
        Creates a mod.

        The mod's id must be unique.
      security:
        - token: ["mod:create"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/mod"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/mod"
              examples:
                mod:
                  $ref: "#/components/examples/mod"
        "400":
          $ref: "#/components/responses/zod_error"
        "401":
          $ref: "#/components/responses/unauthorized"
        "419":
          $ref: "#/components/responses/too_many_requests"
        "500":
          $ref: "#/components/responses/internal_server_error"

  /mods/:id:
    get:
      summary: Get Mod
      description: |
        Returns a mod.

        The mod's versions can be viewed with the [GET `/mods/:id/versions`](#/paths/~1mods~1:id~1versions/get) endpoint,
        this endpoint is used to get the mod's basic data (name, homepage url).
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: The mod's unique ID.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/mod"
              examples:
                mod:
                  $ref: "#/components/examples/mod"
        "400":
          $ref: "#/components/responses/zod_error"
        "401":
          $ref: "#/components/responses/unauthorized"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
              examples:
                mod_not_found:
                  summary: Mod not found
                  value: { "errors": ["Mod not found"] }
        "419":
          $ref: "#/components/responses/too_many_requests"
        "500":
          $ref: "#/components/responses/internal_server_error"
    put:
      summary: Update Mod
      security:
        - token: ["mod:modify"]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: The mod's unique ID.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/partial_mod"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/mod"
              examples:
                mod:
                  $ref: "#/components/examples/mod"
        "400":
          $ref: "#/components/responses/zod_error"
        "401":
          $ref: "#/components/responses/unauthorized"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
              examples:
                mod_not_found:
                  summary: Mod not found
                  value: { "errors": ["Mod not found"] }
        "419":
          $ref: "#/components/responses/too_many_requests"
        "500":
          $ref: "#/components/responses/internal_server_error"
    delete:
      summary: Delete Mod
      security:
        - token: ["mod:delete"]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: The mod's unique ID.
      responses:
        "204":
          description: No Content
        "400":
          $ref: "#/components/responses/zod_error"
        "401":
          $ref: "#/components/responses/unauthorized"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
              examples:
                mod_not_found:
                  summary: Mod not found
                  value: { "errors": ["Mod not found"] }
        "419":
          $ref: "#/components/responses/too_many_requests"
        "500":
          $ref: "#/components/responses/internal_server_error"

  /mods/:id/versions:
    get:
      summary: Get Mod Versions
      description: |
        Returns a mod's versions.

        See more about the version scheme at the [POST `/mods/:id/versions`](#/paths/~1mods~1:id~1versions/post) endpoint.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: The mod's unique ID.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/version"
              examples:
                versions:
                  $ref: "#/components/examples/versions"
        "400":
          $ref: "#/components/responses/zod_error"
        "401":
          $ref: "#/components/responses/unauthorized"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
              examples:
                mod_not_found:
                  summary: Mod not found
                  value: { "errors": ["Mod not found"] }
        "419":
          $ref: "#/components/responses/too_many_requests"
        "500":
          $ref: "#/components/responses/internal_server_error"
    post:
      summary: Create Mod Version
      description: |
        Creates a mod version.

        The version ID must conform to the [semantic versioning](https://semver.org/spec/v2.0.0.html) standard. Any leading `v` or surrounding whitespace will be removed.

        The version's "unique key" is the combination of the version's ID, modloader, and Minecraft version.<br>
        That means there can be two versions with the same ID and modloader, but different Minecraft versions.<br>
        Likewise there can also be two versions with the same ID and Minecraft version, but different modloaders.<br>

        The `recommended` field is used to determine which version is stable, this is used for the [GET `/mods/:id/forge`](#/paths/~1mods~1:id~1forge/get) endpoint.<br>
        The `changelog` field is used to store the version's changelog (duh!), this is also used for the [GET `/mods/:id/forge`](#/paths/~1mods~1:id~1forge/get) endpoint.

        The dependencies are structured as such:
          - `id`: The dependency's unique ID.
          - `version`: The dependency's version.
          - `required`: Whether the dependency is required or not.
          - `side`: The dependency's side. This means that `"CLIENT"` means the dependency is only required on the client side,<br>
            `"SERVER"` means the dependency is only required on the server side,<br>
            `"BOTH"` is required both on the client and server.
          - `version`: The dependency's version or version range. See [NPM's semver](https://nodejs.dev/learn/semantic-versioning-using-npm) for more information.
      security:
        - token: ["mod:modify"]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: The mod's unique ID.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/version"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/version"
              examples:
                version:
                  $ref: "#/components/examples/version"
        "400":
          $ref: "#/components/responses/zod_error"
        "401":
          $ref: "#/components/responses/unauthorized"
        "419":
          $ref: "#/components/responses/too_many_requests"
        "500":
          $ref: "#/components/responses/internal_server_error"
    delete:
      summary: Delete Mod Version
      security:
        - token: ["mod:delete"]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The mod's unique ID.
        - name: version
          in: query
          required: true
          schema:
            type: string
          description: The mod version's ID.
        - name: loader
          in: query
          required: true
          schema:
            type: string
          description: The mod loader.
        - name: minecraft
          in: query
          required: true
          schema:
            type: string
          description: The Minecraft version.
      responses:
        "204":
          description: No Content
        "400":
          $ref: "#/components/responses/zod_error"
        "401":
          $ref: "#/components/responses/unauthorized"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
              examples:
                mod_not_found:
                  summary: Mod not found
                  value: { "errors": ["Mod not found", "Version not found"] }
        "419":
          $ref: "#/components/responses/too_many_requests"
        "500":
          $ref: "#/components/responses/internal_server_error"

  /mods/:id/forge:
    get:
      summary: Get Forge Update JSON
      description: |
        Returns Forge Update JSON.

        See: https://mcforge.readthedocs.io/en/latest/gettingstarted/autoupdate/#update-json-format
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: The mod's unique ID.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/forge_update_json"
              examples:
                forge_update_json:
                  $ref: "#/components/examples/forge_update_json"
        "400":
          $ref: "#/components/responses/zod_error"
        "401":
          $ref: "#/components/responses/unauthorized"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
              examples:
                mod_not_found:
                  summary: Mod not found
                  value: { "errors": ["Mod not found"] }
        "419":
          $ref: "#/components/responses/too_many_requests"
        "500":
          $ref: "#/components/responses/internal_server_error"
