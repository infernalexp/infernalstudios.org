/auth/login:
  post:
    summary: Login
    description: |
      Logs in the user and returns a token.
      The token is practically unexpireable.
    security:
      - login: []

    requestBody:
      description: |
        The request body must contain the username and password of the user.
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [username, password]
            properties:
              username:
                type: string
                description: |
                  The username of the user.
              password:
                type: string
                description: |
                  The password of the user.<br>
                  The password must not be hashed by the client, the server does it automatically.<br>
                  Because of this, the api call should be made through HTTPS.
          examples:
            login:
              value: { "username": "admin", "password": "really_secure_PASSW0RD" }
    responses:
      "200":
        description: OK
        content:
          application/json:
            schema:
              $ref: "#../components/schemas/token"
            examples:
              token:
                $ref: "#../components/examples/token"
      "400":
        $ref: "#../components/responses/zod_error"
      "401":
        description: Unauthorized
        content:
          application/json:
            schema:
              $ref: "#../components/schemas/error"
            examples:
              invalid_credentials:
                summary: Invalid credentials
                value: { "errors": ["Invalid username or password"] }
      "419":
        $ref: "#../components/responses/too_many_requests"
      "500":
        $ref: "#../components/responses/internal_server_error"

/auth/token:
  post:
    summary: Create Token
    description: |
      Creates a token for the user.<br>
      A token can only inherit its owner's permissions, it cannot have any additional permissions.
    security:
      - token: []

    requestBody:
      description: |
        The request body must contain an object with a `"permissions"` array.
      required: true
      content:
        application/json:
          schema:
            $ref: "#../components/schemas/partial_token"
    responses:
      "200":
        description: OK
        content:
          application/json:
            schema:
              $ref: "#../components/schemas/token"
            examples:
              token:
                $ref: "#../components/examples/token"
      "400":
        $ref: "#../components/responses/zod_error"
      "401":
        $ref: "#../components/responses/unauthorized"
      "419":
        $ref: "#../components/responses/too_many_requests"
      "500":
        $ref: "#../components/responses/internal_server_error"

/auth/token/:id:
  delete:
    summary: Delete Token
    description: |
      Deletes a token.

      A token can only be deleted if it is not expired.<br>
      Expired tokens are automatically deleted every minute, there's no need to do it yourself.<br>
      If an expired token hasn't been deleted yet, it will be deleted when it's used.<br>
      A token can delete itself, and another token can delete it if it has the `"token:delete"` permission.<br>
      Only tokens belonging to the same user can delete each other.
    security:
      - token: ["token:delete"]
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          description: The token's unique ID.
    responses:
      "204":
        description: No Content
      "400":
        $ref: "#../components/responses/zod_error"
      "401":
        $ref: "#../components/responses/unauthorized"
      "404":
        description: Not Found
        content:
          application/json:
            schema:
              $ref: "#../components/schemas/error"
            examples:
              token_not_found:
                summary: Token not found
                value: { "errors": ["Token not found"] }
      "419":
        $ref: "#../components/responses/too_many_requests"
      "500":
        $ref: "#../components/responses/internal_server_error"
